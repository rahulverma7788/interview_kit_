# -*- coding: utf-8 -*-
"""part_1+2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kdQoohMFhm1gpZNjOkvRV846dtsP79r_
"""

#Name - Rahul Verma
#G-mail - rahulverma207788@gmail.com
#github_url -https:"//github.com/rahulverma7788/pima-diabetes-prediction/blob/master/pima_diabetes.py
#https://github.com/rahulverma7788/handwrittendigitrecognizer/blob/master/handwrittendigitrecognizer.py
#https://github.com/rahulverma7788/kaggle-titanic-project/blob/master/titanic.py

# Commented out IPython magic to ensure Python compatibility.
#import library
import pandas as pd
from pandas import datetime
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from matplotlib.pylab import rcParams

#datasett
jio = pd.read_csv('jio.csv', parse_dates=['Date'])
NIFTY = pd.read_csv('NIFTY.csv', parse_dates=['Date'])
airtel = pd.read_csv('airtel.csv', parse_dates=['Date'])
stocks = [jio, airtel, NIFTY]
jio.name = 'jio'
NIFTY.name = 'NIFTY'
airtel.name = 'airtel'

jio["Date"] = pd.to_datetime(jio["Date"])
airtel["Date"] = pd.to_datetime(airtel["Date"])
NIFTY["Date"] = pd.to_datetime(NIFTY["Date"])

airtel.head(10)

jio.head(10)

NIFTY.head(10)

weeks = [4, 16, 28, 40, 52]

def indexing(stock):
    stock.index = stock['Date']
    return stock

indexing(jio)
indexing(airtel)
indexing(NIFTY)

stocks = [jio,airtel,NIFTY]

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
pylab.rcParams['figure.figsize'] = (20, 12)

def moving_average(values,size):
    weights = np.repeat(1.0, size)/size
    smas = np.convolve(values,weights,'valid')
    print(type(smas))
    return smas

def moving_average_plot(stock):
    size_arr = [4,16,28,40,52]
    moving_avg = {}
    plt.title("Moving average "+stock.name,fontsize=20)
    plt.plot(stock["Date"],stock["Close"],label="Closing-pricing",linestyle='--',linewidth=2) 
    for i in range(len(size_arr)):
        a = [None for i in range(size_arr[i]-1)]
        a = np.array(a)
        moving_avg[size_arr[i]] = np.hstack([a,moving_average(stock["Close"],size_arr[i])])       
        stock[str(size_arr[i])+"_moving_avg"] = moving_avg[size_arr[i]] 
        name = "Moving average  "+str(size_arr[i])+" weeks"
        print(name + "is as follow :")
        print(stock[str(size_arr[i])+"_moving_avg"])
        plt.plot(stock["Date"],moving_avg[size_arr[i]],label = name,linewidth=2) 
    plt.legend(title = "Legends",loc = 3,prop={'size': 12})
    plt.show()

moving_average_plot(jio)

moving_average_plot(airtel)

moving_average_plot(NIFTY)

def rolling_window(stock):
    plt.title("Moving average" + stock.name,fontsize = 15)
    plt.plot(stock["Close"],label="Original_closing_Price")
    rolling_size = ["10","25","50","75"]
    for i in range(len(rolling_size)):
        temp_name = str(rolling_size[i])+" rolling window"
        stock[temp_name] = np.round(stock["Close"].rolling(window = int(rolling_size[i]), center = False).mean(), 2)
        text = "Rolling window of size : "+rolling_size[i]
        print(text)
        print(stock[temp_name])
        plt.plot(stock[temp_name],label=text)
    plt.legend(title = "Legends",loc = 3,prop={'size': 12})
    plt.show()

rolling_window(jio)

rolling_window(airtel)

rolling_window(NIFTY)

def volume_shocks(stock):
  stock["vol_t+1"] = stock.Volume.shift(1)
  stock["volume_shock"] = ((abs(stock["vol_t+1"] - stock["Volume"])/stock["Volume"]*100)  > 10).astype(int)
  return stock

volume_shocks(jio)

volume_shocks(airtel)

def price_shock(stock):
  stock["price_t+1"] = stock.Close.shift(1)
  stock["price_shock"] = ((abs(stock["price_t+1"] - stock["Close"])/stock["Close"]*100) > 2).astype(int)
  stock["price_black_swan"] = stock['price_shock']
  return stock

price_shock(jio)

price_shock(airtel)

price_shock(NIFTY)

def Pricing_black_swan(stock):
  stock["price_t+1"] = stock.Close.shift(1)
  stock["Pricing_black_swan"] = ((abs(stock["price_t+1"] - stock["Close"])/stock["Close"]*100) > 5).astype(int)
  stock["price_black_swan"] = stock['Pricing_black_swan']
  return stock

Pricing_black_swan(jio)

Pricing_black_swan(airtel)

Pricing_black_swan(NIFTY)

def price_shock_without_volume_shock(stock):
  stock["not_vol_shock"] = (~(stock["volume_shock"].astype(bool))).astype(int)
  stock["price_shock_without_volume_shock"] = stock["not_vol_shock"] & stock["price_shock"]
  return stock

price_shock_without_volume_shock(jio)

price_shock_without_volume_shock(airtel)

import bokeh
from bokeh.plotting import figure, output_file, show
from bokeh.io import show, output_notebook
from bokeh.palettes import Blues9
from bokeh.palettes import RdBu3
from bokeh.models import ColumnDataSource, CategoricalColorMapper, ContinuousColorMapper
from bokeh.palettes import Spectral11

output_notebook()

def bokeh_plot(stock):
  data = dict(stock=stock['Close'], Date=stock.index)
  load = figure(plot_width=800, plot_height=250,  title = 'time series for {}' .format(stock.name), x_axis_type="datetime")
  load.line(stock.index, stock['Close'], color='red', alpha=0.3)
  load.circle(stock.index, stock.Close*stock["price_shock_without_volume_shock"], size=4, legend='Price Shock Without Volume Shock')
  show(load)

bokeh_plot(jio)

bokeh_plot(airtel)

from statsmodels.tsa.stattools import acf, pacf
def draw_pack(stock):
  lags = 50
  x = list(range(lags))
  y = figure(plot_height = 500, title = "Partial Autocorrelation Plot {} ".format(stock.name))
  partial_autocorr = pacf(stock["Close"], nlags = lags)
  y.vbar(x=x, top=partial_autocorr, width=0.9)
  show(y)

draw_pack(jio)

draw_pack(airtel)

draw_pack(NIFTY)















jio.shape

airtel.shape

NIFTY.shape

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
pylab.rcParams['figure.figsize'] = (20, 12)

def moving_average(values,size):
    weights = np.repeat(1.0, size)/size
    smas = np.convolve(values,weights,'valid')
    print(type(smas))
    return smas

def moving_average_PLOT(stock):
    size_arr = [4,16,28,40,52]
    moving_avg = {}
    plt.title("Moving average for "+stock.name,fontsize=20)
    plt.plot(stock["Date"],stock["Close"],label="Closing pricing",linestyle='--',linewidth=2)
    for i in range(len(size_arr)):
        a = [None for i in range(size_arr[i]-1)]
        a = np.array(a)
        moving_avg[size_arr[i]] = np.hstack([a,moving_average(stock["Close"],size_arr[i])])
        stock[str(size_arr[i])+"_moving_avg"] = moving_avg[size_arr[i]]
        name = "Moving average for "+str(size_arr[i])+" weeks"
        print(name + "is as follow :")
        print(stock[str(size_arr[i])+"_moving_avg"])
        plt.plot(stock["Date"],moving_avg[size_arr[i]],label = name,linewidth=2)
    plt.legend(title = "Legends",loc = 3,prop={'size': 12})
    plt.show()

moving_average_PLOT(jio)

moving_average_PLOT(airtel)

moving_average_PLOT(NIFTY)

def rolling_window(stock):
    plt.title("Moving average with inbuilt function on" + stock.name,fontsize = 15)
    plt.plot(stock["Close"],label="Original closing Price")
    rolling_size = ["10","25","50","75"]
    for i in range(len(rolling_size)):
        temp_name = str(rolling_size[i])+" rolling window"
        stock[temp_name] = np.round(stock["Close"].rolling(window = int(rolling_size[i]), center = False).mean(), 2)
        text = "Rolling window of size : "+rolling_size[i]
        print(text)
        print(stock[temp_name])
        plt.plot(stock[temp_name],label=text)
    plt.legend(title = "Legends",loc = 3,prop={'size': 12})
    plt.show()

rolling_window(jio)

rolling_window(airtel)

rolling_window(NIFTY)

jio["prev_day"] = jio.Volume.shift(1)
airtel["prev_day"] = airtel.Volume.shift(1)
NIFTY["prev_day"] = NIFTY.Volume.shift(1)

jio["Volume_Shock"] = ((((abs(jio["prev_day"]-jio["Volume"]))/jio["Volume"])*100)>10).astype(int)
print(jio["Volume_Shock"])

airtel["Volume_Shock"] = ((((abs(airtel["prev_day"]-airtel["Volume"]))/airtel["Volume"])*100)>10).astype(int)
print(airtel["Volume_Shock"])

NIFTY["Volume_Shock"] = ((((abs(NIFTY["prev_day"]-NIFTY["Volume"]))/NIFTY["Volume"])*100)>10).astype(int)
print(NIFTY["Volume_Shock"])

def direction_shock(stock_name):
    if(stock_name["Volume_Shock"]==1):
        if(stock_name["Volume"]-stock_name["prev_day"]>0):
            return 1
        else:
            return 0
    else:
        return "NaN"

jio["dir_shock"] = 'NaN'
jio["dir_shock"] = jio.apply(direction_shock,axis=1)
print(jio["dir_shock"])

airtel["dir_shock"] = 'NaN'
airtel["dir_shock"] = airtel.apply(direction_shock,axis=1)
print(airtel["dir_shock"])

NIFTY["dir_shock"] = 'NaN'
NIFTY["dir_shock"] = NIFTY.apply(direction_shock,axis=1)
print(NIFTY["dir_shock"])

jio["prev_day_close"] = jio.Close.shift(-1)
airtel["prev_day_close"] = airtel.Close.shift(-1)
NIFTY["prev_day_close"] = NIFTY.Close.shift(-1)

jio["Close_price_shock"] = ((((abs(jio["prev_day_close"]-jio["Close"]))/jio["Close"])*100)>2).astype(int)
print(jio["Close_price_shock"])

airtel["Close_price_shock"] = ((((abs(airtel["prev_day_close"]-airtel["Close"]))/airtel["Close"])*100)>2).astype(int)
print(airtel["Close_price_shock"])

NIFTY["Close_price_shock"] = ((((abs(NIFTY["prev_day_close"]-NIFTY["Close"]))/NIFTY["Close"])*100)>2).astype(int)
print(NIFTY["Close_price_shock"])

def direction_close_shock(stock_name):
    if(stock_name["Close_price_shock"]==1):
        if(stock_name["Close"]-stock_name["prev_day_close"]>0):
            return 1
        else:
            return 0
    else:
        return "Nan"

jio["dir_shock_price"] = 'Nan'
jio["dir_shock_price"] = jio.apply(direction_close_shock,axis=1)
print(jio["dir_shock_price"])

airtel["dir_shock_price"] = 'Nan'
airtel["dir_shock_price"] = airtel.apply(direction_close_shock,axis=1)
print(airtel["dir_shock_price"])

NIFTY["dir_shock_price"] = 'Nan'
NIFTY["dir_shock_price"] = NIFTY.apply(direction_close_shock,axis=1)
print(NIFTY["dir_shock_price"])

jio["notVolShock"]  = (~(jio["Volume_Shock"].astype(bool))).astype(int)
jio["Pshock_w/o_volShock"] =  (jio["notVolShock"] & jio["dir_shock_price"]).astype(int)
print(jio["Pshock_w/o_volShock"])

airtel["notVolShock"]  = (~(airtel["Volume_Shock"].astype(bool))).astype(int)
airtel["Pshock_w/o_volShock"] =  (airtel["notVolShock"] & airtel["dir_shock_price"]).astype(int)
print(airtel["Pshock_w/o_volShock"])

NIFTY["notVolShock"]  = (~(NIFTY["Volume_Shock"].astype(bool))).astype(int)
NIFTY["Pshock_w/o_volShock"] =  (NIFTY["notVolShock"] & NIFTY["dir_shock_price"]).astype(int)
print(NIFTY["Pshock_w/o_volShock"])

from bokeh.plotting import figure, show, output_file, output_notebook
from bokeh.palettes import Spectral11, colorblind, Inferno, BuGn, brewer,GnBu,Blues
from bokeh.models import HoverTool, value, LabelSet, Legend, ColumnDataSource,LinearColorMapper,BasicTicker, PrintfTickFormatter, ColorBar

output_notebook()

def bokeh_visuals(stock):
    fig = figure(x_axis_type="datetime")
    fig.line(stock.index, stock['Close'], color='blue', alpha=0.5)
    fig.circle(stock.index, stock.Close*stock["Pshock_w/o_volShock"], size=4, legend='price shock without vol shock')
    show(fig)

bokeh_visuals(jio)

bokeh_visuals(airtel)

bokeh_visuals(NIFTY)

from statsmodels.tsa.stattools import acf, pacf

def draw_pacf(stock):
    
    lags = 50

    x = list(range(lags))

    p = figure(plot_height=500, title="Partial Autocorrelation PLot " +stock.name)

    partial_autocorr = pacf(stock["Close"], nlags=lags-1)
    p.vbar(x=x, top=partial_autocorr, width=0.9)
    show(p)

draw_pacf(jio)

draw_pacf(airtel)

draw_pacf(NIFTY)